looping throught the entire list:
Let’s say we have a list of magicians’ names, and we want to print out each name in the list.
-------------------------------------------
magicians = ['alice', 'david', 'carolina']
for magician in magicians:
print(magician)
-------------------------------------------
alice
david
carolina
-------------------------------------------



With Python's loop indention matters as all what are indented after the loop will be part of the loop.
Unlike bash or other language where ending a loop with done, or having them in cased in {} ()

This is a logical error. The syntax is valid Python code, but the code does not produce the desired result because a problem 
occurs in its logic.



range:
Python’s range() function makes it easy to generate a series of numbers.
you can use the range() function to print a series of numbers.
The range() function causes Python to start counting at the first value you give it, and it stops when it reaches the second 
value you provide. Because it stops at that second value, the output never contains the end value.
--------------------------
for value in range(1, 5):
print(value)
--------------------------
1
2
3
4
--------------------------
You can also pass range() only one argument, and it will start the sequence of numbers at 0. For example,
range(6) would return the numbers from 0 through 5.

** range is like seq in bash **
** for i in $(seq 1 4) **



If you want to make a list of numbers, you can convert the results of range() directly into a list using the list() function.
When you wrap list() around a call to the range() function, the output will be a list of numbers.
---------------------------
numbers = list(range(1, 6))
print(numbers)
---------------------------
[1, 2, 3, 4, 5]
---------------------------







