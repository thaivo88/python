At the heart of every if statement is an expression that can be evaluated as True or False and is called a conditional test.
Python uses the values Ture and False to decide whether the code in an if statement should be executed.

(==) This equality operator returns Ture if the values on the left and right side of the operator match, and False if they don’t match.

(!=) When you want to determine whether two values are not equal, you can combine an exclamation point and an equal sign.

and
To check whether two conditions are both True simultaneously, use the key word and to combine the two conditional tests; if each test 
passes, the over all expression evaluates to True. If either test fails or if both tests fail, the expression evaluates to False.

or
The keyword or allows you to check multiple conditions as well, but it passes when either or both of the individual tests pass. An
or expression fails only when both individual tests fail.

in 
To find out whether a particular value is already in a list, use the key word in.
```
requested_toppings = ['mushrooms', 'onions', 'pineapple']
'mushrooms' in requested_toppings
True
'pepperoni' in requested_toppings
False
```

not
Other times, it’s important to know if a value does not appear in a list. You can use the keyword not in this situation.
```
banned_users = ['andrew', 'carolina', 'david']
user = 'marie'
if user not in banned_users:
print(f"{user.title()}, you can post a response if you wish.")
```

A Boolean expression is just another name for a conditional test. A Boolean value is either True or False.

simple if statement
The simplest kind of if statement has one test and one action:
```
    if [conditional_test]:
    do [something]
```
```
age = 19
if age >= 18:
print("You are old enough to vote!")
```
```
You are old enough to vote!
```


if-else statements
An if-else block is similar to a simple if statement, but the else statement allows you to define an action or set of actions that are
executed when the conditional test fails.
```
age = 17
if age >= 18:
print("You are old enough to vote!")
print("Have you registered to vote yet?")
else:
print("Sorry, you are too young to vote.")
print("Please register to vote as soon as you turn 18!")
```
```
Sorry, you are too young to vote.
Please register to vote as soon as you turn 18!
```

if-elif-else chain
you’ll need to test more than two possible situations, and to evaluate these you can use Python’s if-elif-else syntax
```
age = 12
if age < 4:
print("Your admission cost is $0.")
if Statements 81
elif age < 18:
print("Your admission cost is $25.")
else:
print("Your admission cost is $40.")
```
```
Your admission cost is $25.
```

testing multiple conditions
sometimes it’s important to check all of the conditions of interest. In this case, you should use a series of simple if
statements with no elif or else blocks. This technique makes sense when more than one condition could be True, and you 
want to act on every condition that is True.

if statements with lists




